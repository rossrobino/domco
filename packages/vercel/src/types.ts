/**
 * https://vercel.com/docs/build-output-api/v3/primitives#serverless-function-configuration
 */
export type ServerlessFunctionConfig = {
	/**
	 * Indicates the initial file where code will be executed for the Serverless Function.
	 */
	handler: string;

	/**
	 * Specifies which "runtime" will be used to execute the Serverless Function.
	 * See [Runtimes](https://vercel.com/docs/functions/serverless-functions/runtimes) for more information.
	 *
	 * @default "nodejs22.x"
	 */
	runtime?: string;

	/**
	 * Amount of memory (RAM in MB) that will be allocated to the Serverless Function.
	 * See [size limits](https://vercel.com/docs/functions/serverless-functions/runtimes#size-limits) for more information.
	 */
	memory?: number;

	/**
	 * Maximum duration (in seconds) that will be allowed for the Serverless Function.
	 * See [size limits](https://vercel.com/docs/functions/serverless-functions/runtimes#size-limits) for more information.
	 */
	maxDuration?: number;

	/**
	 * Map of additional environment variables that will be available to the Serverless Function,
	 * in addition to the env vars specified in the Project Settings.
	 */
	environment?: Record<string, string>[];

	/**
	 * List of Vercel [Regions](https://vercel.com/docs/concepts/edge-network/regions)
	 * where the Serverless Function will be deployed to.
	 */
	regions?: string[];

	/**
	 * True if a custom runtime has support for Lambda runtime wrappers.
	 */
	supportsWrapper?: boolean;

	/**
	 * When true, the Serverless Function will stream the response to the client.
	 */
	supportsResponseStreaming?: boolean;

	bunVersion?: string;
};

export type NodejsServerlessFunctionConfig = ServerlessFunctionConfig & {
	/**
	 * Specifies which launcher to use. Currently only "Nodejs" is supported.
	 *
	 * @default "Nodejs"
	 */
	launcherType?: "Nodejs";

	/**
	 * Enables request and response helpers methods.
	 *
	 * @default false
	 */
	shouldAddHelpers?: boolean;

	/**
	 * Enables source map generation.
	 *
	 * @default false
	 */
	shouldAddSourceMapSupport?: boolean;
};

export type PrerenderFunctionConfig = {
	/**
	 * Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
	 * Setting the value to `false` means it will never expire.
	 *
	 * @example (one day)
	 *
	 * 60 * 60 * 24
	 */
	expiration: number | false;

	/**
	 * Option group number of the asset.
	 * Prerender assets with the same group number will all be re-validated at the same time.
	 */
	group?: number;

	/**
	 * Random token assigned to the `__prerender_bypass` cookie when [Draft Mode](https://vercel.com/docs/workflow-collaboration/draft-mode) is enabled,
	 * in order to safely bypass the Edge Network cache
	 */
	bypassToken?: string;

	/**
	 * Name of the optional fallback file relative to the configuration file.
	 */
	fallback?: string;

	/**
	 * List of query string parameter names that will be cached independently.
	 * If an empty array, query values are not considered for caching.
	 * If undefined each unique query value is cached independently
	 */
	allowQuery?: string[];

	/**
	 * 	When true, the query string will be present on the request argument passed to the invoked function.
	 * The allowQuery filter still applies.
	 */
	passQuery?: boolean;
};

export type OutputConfig = {
	version: 3;
	routes?: Route[];
	images?: ImagesConfig;
	wildcard?: WildcardConfig;
	overrides?: OverrideConfig;
	cache?: Cache;
	crons?: CronsConfig;
	framework?: Framework;
};

export type Route = Source | Handler;

type Source = {
	src: string;
	dest?: string;
	headers?: Record<string, string>;
	methods?: string[];
	continue?: boolean;
	caseSensitive?: boolean;
	check?: boolean;
	status?: number;
	has?: Array<HostHasField | HeaderHasField | CookieHasField | QueryHasField>;
	missing?: Array<
		HostHasField | HeaderHasField | CookieHasField | QueryHasField
	>;
	locale?: Locale;
	middlewareRawSrc?: string[];
	middlewarePath?: string;
};

type Locale = { redirect?: Record<string, string>; cookie?: string };

type HostHasField = { type: "host"; value: string };

type HeaderHasField = { type: "header"; key: string; value?: string };

type CookieHasField = { type: "cookie"; key: string; value?: string };

type QueryHasField = { type: "query"; key: string; value?: string };

type HandleValue =
	| "rewrite"
	| "filesystem" // check matches after the filesystem misses
	| "resource"
	| "miss" // check matches after every filesystem miss
	| "hit"
	| "error"; //  check matches after error (500, 404, etc.)

type Handler = {
	handle: HandleValue;
	src?: string;
	dest?: string;
	status?: number;
};

type ImageFormat = "image/avif" | "image/webp";

type RemotePattern = {
	protocol?: "http" | "https";
	hostname: string;
	port?: string;
	pathname?: string;
};

export type ImagesConfig = {
	/** Supported image widths. */
	sizes: number[];

	/**
	 * Allowed external domains that can use Image Optimization. Leave empty for only allowing the deployment domain to use Image Optimization.
	 */
	domains: string[];

	/**
	 * Allowed external patterns that can use Image Optimization. Similar to `domains` but provides more control with RegExp.
	 */
	remotePatterns?: RemotePattern[];

	/** Cache duration (in seconds) for the optimized images. */
	minimumCacheTTL?: number;

	/** Supported output image formats. */
	formats?: ImageFormat[];

	/** Allow SVG input image URLs. This is disabled by default for security purposes. */
	dangerouslyAllowSVG?: boolean;

	/**
	 * Change the [Content Security Policy](https://developer.mozilla.org/docs/Web/HTTP/CSP) of the optimized images.
	 */
	contentSecurityPolicy?: string;

	/** Specifies the value of the `"Content-Disposition"` response header. */
	contentDispositionType?: string;
};

type WildCard = { domain: string; value: string };

type WildcardConfig = Array<WildCard>;

type Override = { path?: string; contentType?: string };

type OverrideConfig = Record<string, Override>;

type Cache = string[];

type Framework = { slug: string; version: string };

type Cron = { path: string; schedule: string };

type CronsConfig = Cron[];

// two separate types are required because we do not want the user to
// be able to set some of the values that are required.
export type RequiredOptions = {
	config: NodejsServerlessFunctionConfig;
	isr?: PrerenderFunctionConfig;
	images?: ImagesConfig;
	trailingSlash?: boolean;
};

export type VercelAdapterOptions = {
	/**
	 * Serverless function config.
	 *
	 * @default
	 *
	 * {
	 * 	handler: "main.js",
	 * 	runtime: "nodejs22.x",
	 * 	launcherType: "Nodejs",
	 * }
	 */
	config?: Partial<
		Omit<NodejsServerlessFunctionConfig, "handler" | "launcherType">
	>;

	/**
	 * ISR config.
	 *
	 * Use [Incremental Static Regeneration](https://vercel.com/docs/concepts/incremental-static-regeneration/overview)
	 * to cache the result of a serverless function as a static asset for a given timeframe.
	 *
	 * For example, to refresh the page every minute, set the `expiration` to `60` seconds.
	 *
	 * Recommended to not use [Hono ETag middleware](https://hono.dev/docs/middleware/builtin/etag) if using ISR. If response is marked as STALE by Vercel but the content hasn't changed, edge server will send request to node server and it will respond 304 NOT MODIFIED. Vercel will never update the edge cache again with the new content and will continue to be STALE. This will result in a new request to the node server every time instead of getting the advantage ISR provides. User can easily apply etag within app if needed instead.
	 *
	 * @default undefined
	 *
	 * @example isr: { expiration: 60 }
	 */
	isr?: Omit<PrerenderFunctionConfig, "fallback" | "group">;

	/**
	 * When the `images` property is defined, the Image Optimization API will be available by visiting the `/_vercel/image` path. When the images property is undefined, visiting the `/_vercel/image` path will respond with 404 Not Found.
	 *
	 * The API accepts the following query string parameters:
	 *
	 * | Key | Type    | Required | Example          | Description                                                                                                                             |
	 * | --- | ------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------- |
	 * | url | String  | Yes      | `/assets/me.png` | The URL of the source image that should be optimized. Absolute URLs must match a pattern defined in the `remotePatterns` configuration. |
	 * | w   | Integer | Yes      | `200`            | The width (in pixels) that the source image should be resized to. Must match a value defined in the sizes configuration.                |
	 * | q   | Integer | Yes      | `75`             | The quality that the source image should be reduced to. Must be between 1 (lowest quality) to 100 (highest quality).                    |
	 *
	 * [Reference](https://vercel.com/docs/build-output-api/v3/configuration#images)
	 *
	 * @default undefined
	 *
	 * @example
	 *
	 * ```js
	 * {
	 * 	// adapter config...
	 * 	images: {
	 * 		sizes: [640, 750, 828, 1080, 1200],
	 * 		domains: [],
	 * 		minimumCacheTTL: 60,
	 * 		formats: ["image/avif", "image/webp"],
	 * 		remotePatterns: [{
	 * 			protocol: "https",
	 * 			hostname: "^via\\.placeholder\\.com$",
	 * 			pathname: "^/1280x640/.*$",
	 * 		}],
	 * 	},
	 * }
	 * ```
	 */
	images?: ImagesConfig;

	/**
	 * - `false` - pathnames that end with slash will redirect to the same path without
	 * - `true` - pathnames that do not end with slash will redirect to the same path with a slash
	 * - `undefined` - no redirect (can be bad for SEO)
	 *
	 * [Reference](https://vercel.com/docs/projects/project-configuration#trailingslash)
	 *
	 * @default undefined
	 */
	trailingSlash?: boolean;
};
